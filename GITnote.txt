-------------------------
安装GITHUB
创建目录（三步）-mkdir+文件名，cd 文件名，pwd(用于显示当前目录)
初始化--git init
-------------------------
添加文件--git add+文件名，git commit -m +"描述信息（版本改动）"（多次的添加，可以一次提交）
查看仓库状态--git status
查看修改内容--git diff
git diff HEAD --文件名（查看工作区和版本库里面最新版本的区别）
------------回退------------
回退指令-git reset --hard HEAD^(回退上个)
HEAD~100(回退100个)HEAD是个指针，指向的版本就是当前版本。
git log -查看提交的历史版本，以便确定回退。
Git reflog -查看命令历史，以便确定要回到未来哪个版本。
------------------------------
工作区和暂存区。-git add由工作区放到到暂存区，git commit将暂存区内容提交到分支。



--------撤销修改-----------
git checkout -- file(是文件回到最近一次add，或commit状态)
git reset HEAD file（可以把暂存区的修改撤销掉，重新放回工作区）
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
----------删除--------------


----------关联远程库-----------
关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
-------------------------------
------------分支创建与合并-------------
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
--------------------------------------
--------------解决冲突-----------------
用git log --graph命令可以看到分支合并图。
---------------------------------------

------------分支策略-------------------
--no--ff参数可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。



------------BUG分支----------------------
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash

用git stash list命令看看：
$ git stash list
stash@{0}: WIP on dev: 6224937 add merge
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了。


------------强行删除分支-----------------
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



----------多人协作-----------------------
多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。


------------------标签----------------
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。（先删除本地标签）



















